<?php
/**
 * 库文件生成工具类
 */
class LibTool{
	function create_html($f){
		global $G_cfg;
		if($G_cfg['single']){
			return $this->create_html_single($f);
		}else{
			return $this->create_html_multi($f);
		}
	}
	function create_html_single($f){
		global $G_cfg, $path_base, $path_cache;
		$path_app = $path_base . preg_replace('/\w+\.html/', '', $f);
		$conf = $this->loadConf($path_app);
		$css = array();
		$js = array();
		list($fw_conf) = $this->loadConfFile($path_base . '/framework/src/conf/aui.json');
		list($app_conf, $str) = $this->loadConfFile($path_app . 'app.json');
		$app_name = str_replace('.app', '', $app_conf->name);
		$arr = explode(',', $fw_conf->css);
		for($i = 0, $len = count($arr); $i < $len; $i++){
			$css[] = $this->create_css($fw_conf->pathcss . $arr[$i], "/framework/res/images/");
		}
		$arr = explode(',', $app_conf->css);
		for($i = 0, $len = count($arr); $i < $len; $i++){
			$css[] = $this->create_css("/apps/$app_name/" . $app_conf->pathcss . $arr[$i], "res/images/");
		}
		$js[] = $this->create_js('/framework/lib/aui.lib.js');
		$arr = explode(',', $fw_conf->lib);
		for($i = 0, $len = count($arr); $i < $len; $i++){
			$js[] = $this->create_js($fw_conf->pathlib . $arr[$i] . '.js');
		}
		$js[] = $this->createAppScript(true, $app_conf->name, $str);
		$arr = explode(',', $app_conf->lib);
		for($i = 0, $len = count($arr); $i < $len; $i++){
			$js[] = $this->create_js("/apps/$app_name/" . $app_conf->pathlib . $arr[$i] . '.js');
		}
		$code = '<!doctype html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<title>' . $app_conf->title . '</title>
<style type="text/css" rel="stylesheet">
'
			. join("\n", $css)
			. "\n</style>\n"
			. $this->createFrameworkScript(true, join("\n", $js))
			. '
</head>
<body>
</body>
</html>';
		if($G_cfg['autogen']){
			file_put_contents($path_cache . basename($f), $code);
		}
		return $code;
	}
	function create_html_multi($f){
		global $G_cfg, $path_base, $path_cache;
		$path_app = $path_base . preg_replace('/\w+\.html/', '', $f);
		$conf = $this->loadConf($path_app);
		if(!file_exists($path_base . $f)){  //如果应用目录中不存在index.html文件
			$f = '/framework/src/conf/index.html';  //则使用框架提供的默认的index.html文件
		}
		$code = file_get_contents($path_base . $f);
		//$code = str_replace('"/framework/lib/aui.lib.js"', '"/framework/lib/aui.lib.js?ts=' . time() . '"', $code);
		if($conf !== null){  //如果存在app.json配置文件
			foreach($conf as $k => $v){
				//echo $k . "=" . $v;
				//preg_replace('/\{\$(\w+)\}/', "\n", $code);
				$code = preg_replace('/\{\$' . $k . '\}/', $v, $code);
				//$code = preg_replace('/\{\$(\w+)\}/', "##$1##", $code);
			}
		}
		if($G_cfg['autogen']){
			file_put_contents($path_cache . basename($f), $code);
		}
		return $code;
	}
	function create_css($f, $pathimg){
		$data = file_get_contents("http://mobile.taoyun.com" . $f);  //[TODO]可以不通过HTTP请求达到目的
		$data = preg_replace('/@charset \"utf-8\";\n+/', "", $data);  //去掉编码标识
		$data = preg_replace('/(url\([\"\']?)..\/images\//', "\\1$pathimg", $data);  //CSS中图片路径替换
		return $data;
	}
	//等效于 file_get_contents($host . $f);
	function create_js($f){
		if(preg_match('/\.lib\.js$/', $f) === 1){  //$ret !== false && $ret !== 0
			return $this->create_lib($f);
		}else{
			return $this->create_tpl($f);
		}
	}
	function create_lib($f){
		global $G_cfg, $path_cache;
		$f = strtolower(str_replace('/alzui-X201', '', $f));
		$filename = $this->parseName($f);
		$code = file_get_contents($filename);
		//$re_import = '/\nimport (\w+(?:\.\w+)+);/';
		$re_import = '/\nimport ([\w\.]+);/';
		$code = preg_replace_callback($re_import, array($this, "do_import_class"), $code);
		if($G_cfg['autogen']){
			//$name = preg_replace('/\.lib\.js/', ".lib0.js", $f);
			file_put_contents($path_cache . basename($f), $code);
		}
		return '/* auto generated by lib.php */'
			. "\n"
			. $code;
	}
	function create_tpl($f){
		global $G_cfg, $path_base, $path_cache, $path_xml, $map;
		$f = strtolower(str_replace('/alzui-X201', '', $f));
		/*
		$arr = array();
		foreach(glob($path_base . $map[$f][1] . "*.xml") as $file){
			$name = basename($file);
			if(substr($name, 0, 1) !== '_'){
				$arr[] = "\"" . $name . "\":\"" . $this->toJsString($this->loadTplFile($file)) . "\"";
			}
		}
		$code = "runtime.regTpl(\"" . $map[$f][0] . "\", {\n"
			. join(",\n", $arr)
			. "\n});";
		*/
		/*
		$basename = basename($f);
		$conf = $map[$basename];
		$path_xml = $path_base . $conf[1];
		$filename = $path_base . preg_replace('/\/(src)\//', '/\1/lib/', $conf[0] . $basename);
		*/
		preg_match('/((?:\/[\w\-]+)*)\/lib\/(\w+\.tpl\.js)/', $f, $matches);
		$path_app = preg_replace('/^\/caf/', '/framework', $matches[1]);
		$path_xml = $path_base . $path_app . '/src/tpl/';
		$filename = $path_base . $path_app . '/src/lib/' . $matches[2];

		$code = file_get_contents($filename);
		$code = preg_replace_callback('/\n(\w+\.xml)/', array($this, "do_import_xml"), $code);
		if($G_cfg['autogen']){
			//$name = preg_replace('/\.tpl\.js/', ".tpl0.js", $f);
			file_put_contents($path_cache . basename($f), $code);
		}
		return '/* auto generated by tpl.php */'
			. "\n"
			. $code;
	}
	function loadConfFile($file){
		$file = $file;
		if(file_exists($file)){
			$str = file_get_contents($file);
			$json = json_decode($str);
			return array($json, $str);
		}else{
			return null;
		}
	}
	/*
	{
		"name": "{$app_name}.app",
		"pathcss": "res/css/",
		"pathimg": "res/images/",
		"pathlib": "lib/",
		"css": "{$app_name}.css",
		"lib": "{$app_name}.tpl,{$app_name}.lib",
		"conf": {
			"debug": true
		},
		"active": true
	}
	*/
	function loadConf($path_app){
		list($json, $str) = $this->loadConfFile($path_app . 'app.json');
		if($json !== null){
			$conf = array(
				'app_name'   => $json->name,
				'app_title'  => $json->title,
				'manifest'   => '',  //' manifest="{$app_name}.manifest"',
				'script_fw'  => $this->createFrameworkScript(false),
				'script_app' => $this->createAppScript(false, $json->name),
				'app_conf'   => $str
			);
			//预处理$conf内容
			/*
			foreach($conf as $k0 => $v0){
				foreach($conf as $k => $v){
					$conf[$k0] = preg_replace('/\{\$' . $k . '\}/', $v, $conf[$k0]);
				}
			}
			*/
			return $conf;
		}else{
			return null;
		}
	}
	/*
	<script type="text/javascript" src="/framework/lib/aui.lib.js"
		pathcss="/framework/res/css/"
		pathimg="/framework/res/images/"
		pathlib="/framework/lib/"
		css="aui.css"
		lib="aui.tpl,caf.lib"
		conf="{
			debug: true,
			core_shield: true,
			use_console: true,
			use_shell: true
		}"
		></script>
	*/
	function createFrameworkScript($build, $code = ''){
		global $path_base;
		list($fw_conf) = $this->loadConfFile($path_base . '/framework/src/conf/aui.json');
		$path_fw = '/framework/';
		/*
		$rt_conf = array(
			'pathcss' => "{$path_fw}res/css/",
			'pathimg' => "{$path_fw}res/images/",
			'pathlib' => "{$path_fw}lib/",
			'css'     => 'aui.css',
			'lib'     => 'aui.tpl,caf.lib',
			'conf'    => '{debug:true,core_shield:true,use_console:true,use_shell:true}'
		);
		*/
		$rt_conf = array(
			'pathcss' => $fw_conf->pathcss,
			'pathimg' => $fw_conf->pathimg,
			'pathlib' => $fw_conf->pathlib,
			'css'     => $fw_conf->css,
			'lib'     => $fw_conf->lib,
			'conf'    => preg_replace('/\"/', "'", json_encode(get_object_vars($fw_conf->conf)))
		);
		$sb = array();
		$sb[] = "<script type=\"text/javascript\"" . ($build ? '' : " src=\"{$path_fw}lib/aui.lib.js\"");
		foreach($rt_conf as $k => $v){
			$sb[] = "\t" . $k . '="' . $v . '"';
		}
		$sb[] = '>';
		if($build){
			$sb[] = 'window.__build__ = true;';
		}
		if($code !== ''){
			$sb[] = $code;
		}
		$sb[] = '</script>';
		return join("\n", $sb);
	}
	function createAppScript($build, $appname, $app_conf=''){
		return ($build ? '' : '<script type="text/javascript">')
		//. "\n<!--"
			. "\nruntime.regApp(\"" . $appname . "\", " . ($app_conf == '' ? "{\$app_conf}" : $app_conf) . ");"
		//. "\n//-->"
			. ($build ? '' : "\n</script>");
	}
	function parseName($f){
		global $path_base, $path_classes;
		$f = strtolower($f);
		/*
		$basename = basename($f);
		$conf = $map[$basename];
		array_unshift($path_classes, $conf[1]);
		return $path_base . preg_replace('/\/(src)\//', '/\1/lib/', $conf[2]) . $basename;
		*/
		preg_match('/((?:\/\w+)*)\/lib\/(\w+\.lib\.js)/', $f, $matches);
		//js_dump($matches);
		$path_app = preg_replace('/^\/caf/', '/framework', $matches[1]);
		if($matches[1] != '/caf' && $matches[1] != '/framework' && $matches[1] != '/alzui-X201'){
			//添加类代码搜索路径，优先搜索应用的类路径
			array_unshift($path_classes, $path_app . '/src/classes/');
		}
		//js_dump($matches);
		return $path_base . $path_app . '/src/lib/' . $matches[2];
	}
	function do_import_class($matches){
		global $path_base, $path_classes;
		$name = preg_replace('/\./', "/", $matches[1]) . '.js';
		$fdata = '';
		for($i = 0, $len = count($path_classes); $i < $len; $i++){
			$file = $path_base . $path_classes[$i] . $name;
			if(file_exists($file)){
				$fdata = file_get_contents($file);
				break;
			}
		}
		$fdata = preg_replace('/_class\(\"(\w+)\", (\w+), function\(\)\{/', '_class("\1", \2, function(_super){', $fdata);
		$fdata = preg_replace('/_class\(\"(\w+)\", \"(\w*)\", function\(\)\{/', '_class("\1", "\2", function(_super){', $fdata);
		return "\n/*<file name=\"" . $name . "\">*/"
			. "\n" . $fdata
			. "\n/*</file>*/";
	}
	function do_import_xml($matches){
		global $path_xml;
		$name = $matches[1];
		$code = $this->loadTplFile($path_xml . $name);
		return "\n\"" . $name . "\":" . ($code === null ? "null" : "'" . $this->toJsString($code) . "'");
	}
	function loadTplFile($file){
		//[TODO]某个模板文件可能不存在，应该提供更友好的错误提示
		if(file_exists($file)){
			$xmlhead = '<?xml version="1.0" encoding="utf-8"?>';
			$fdata = file_get_contents($file);
			//$fdata = preg_replace('/<!--(.|\r|\n)*?-->/', '', $fdata);  //去掉HTML注释
			$fdata = $this->removeComments($fdata);                   //去掉注释
			$fdata = preg_replace('/\r\n/', "\n", $fdata);            //回车换行统一转换为"\n"
			$fdata = preg_replace('/>[ \t]*\n[ \t]*/', ">", $fdata);  //去掉标签后面的空白字符
			$fdata = preg_replace('/[ \t]*\n[ \t]*</', "<", $fdata);  //去掉标签前面的空白字符
			$fdata = str_replace($xmlhead, '', $fdata);               //XML文件头
			return $fdata;
		}else{
			return null;
		}
	}
	/**
	 * 去掉HTML代码中的注释
	 */
	function removeComments($data){
		$sb = array();
		$s1 = '<!--';
		$s2 = '-->';
		$len1 = strlen($s1);
		$len2 = strlen($s2);
		$p2 = -$len2;
		$p1;
		while(true){
			$p2 += $len2;
			$p1 = strpos($data, $s1, $p2);
			if($p1 !== false){
				$sb[] = substr($data, $p2, $p1 - $p2);  //保存正式内容
				$p2 = strpos($data, $s2, $p1);
				if($p2 !== false){
					//echo substr($data, $p1, $p2 + $len2 - $p1);
					continue;
				}else{
					//最后一个注释没有找到结束
					//$sb[] = substr($data, $p1);  //包含之
					break;
				}
			}else{
				$sb[] = substr($data, $p2);  //最后一段代码
				break;
			}
		}
		return join("", $sb);
	}
	/**
	 * 把 java 字符串转换为 js 字符串
	 * @param s 要转换成 JS 字符串的 java 字符串
	 */
	function toJsString($s){
		$sb = array();
		for($i = 0, $len = strlen($s); $i < $len; $i++){
			$ch = substr($s, $i, 1);
			switch($ch){
			case "\\": array_push($sb, "\\\\");break;
			case "\r": array_push($sb, "\\r");break;
			case "\n": array_push($sb, "\\n");break;
			case "\t": array_push($sb, "\\t");break;
			case "'" : array_push($sb, "\\'");break;
		//case "\"": array_push($sb, "\\\"");break;
		//case "&" : array_push($sb, "\\x26");break;
		//case "<" : array_push($sb, "\\x3C");break;
		//case ">" : array_push($sb, "\\x3E");break;
			default  : array_push($sb, $ch);break;
			}
		}
		return join("", $sb);
	}
	/*
	function mergeFiles($files){
		$code = array();
		for($i = 0, $len = count($files); $i < $len; $i++){
			$file = $files[$i];
			if(is_array($file)){
				$code[] = $this->createAppScript(true, $file[0], $file[1]);
			}else{
				$code[] = file_get_contents("http://mobile.taoyun.com" . $file);
			}
		}
		return join("\n", $code);
	}
	*/
}